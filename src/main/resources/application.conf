akka {
    loglevel = DEBUG
    loggers = ["akka.event.slf4j.Slf4jLogger"]
}

javabin-rest-on-akka {
    app {
        path = app
    }

    presentation {
        path = presentation
    }

    swagger-ui {
        # yes, this was done in a hurry, and was the quickest way to get a versioned swagger distribution
        # from bower: by adding it as a dependency that's actually unused in our /app.
        path = app/bower_components/swagger-ui/dist
    }

    http {
        interface = "localhost"
        port = 8080

        cookie-secret = AegxONxQvl7c4yvWPZdolaYVgsRO04

        # a weak hashing algorithm here allows us to accept requests
        # quicker with lower cpu usage, but a stronger one (e.g HmacSHA256)
        # can be used as well.
        cookie-secret-algorithm = HmacSHA1
        cookie-user-key = user
    }

    elasticsearch {
        mode = node # may be either node or transport

        settings {
            cluster.name = javabin-rest-on-akka

            # disable built-in http server, we'll bridge the requests from our service ourselves.
            http.enabled = false
            # .. and use the local transport by default
            transport.type = local

            # disable multicast discovery by default
            discovery.zen.ping.multicast.enabled = false

            # no need to block until we've recovered. we have our own health checks
            discovery.initial_state_timeout = 0
        }

        metrics {
            # enables a crazy mode that indexes the currently available metrics
            # to a "metrics"-index at the given interval. doing this enable us
            # to analyze the metrics observed later using multiple tools, such as Kibana
            enabled = true

            interval = 1s
            # set the ttl to control how long each metric document should exist before being automatically deleted.
            ttl = 2d

            duration-unit = milliseconds
            rate-unit = seconds
        }

        plugins-directory = plugins
    }

    # these users have passwords that defaults to "foobar", use BCrypt to generate new ones as required:
    #
    # $ sbt-console
    # scala> org.mindrot.jbcrypt.BCrypt.hashpw("foobar", org.mindrot.jbcrypt.BCrypt.gensalt())
    # res1: String = $2a$10$adUvJaAYV48az/7Ao5eDDOnRjrj6SHkBOYWmLWUT.Ok0l0Sa69jpe

    root-user {
        username = "root"
        passwordHash = "$2a$10$FwWPnrHiXjJGbxLlmCpb3ucd4OYk9CfECNFVMYP8TcHEs3y6cBT2O" # defaults to foobar
        attributes {
            permissions = [".*"]
        }
    }

    # the password for this user also exist in plaintext in the application javascript as well as in the api
    # documentation (search for foobar). this is not a security problem because any user should be able to
    # authenticate as the anonymous user
    anonymous-user {
        username = "anonymous"
        passwordHash = "$2a$10$q7Ya9xfyN/rkXc7gqUSLAegxONxQvl7c4yvWPZdolaYVgsRO04dyW" # defaults to foobar
        attributes {
            anonymous = true
        }
    }

    # default attributes for new users. default allows changing their own password and sending + receiving messages.
    default-user-attributes {
        permissions = ["users", "messages"]
    }
}

spray.can.server {
    # Enables/disables the addition of a `Remote-Address` header
    # holding the clients (remote) IP address, which is used by the "clientIp"-directive
    remote-address-header = on
}